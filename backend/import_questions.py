import io
import re
from sqlalchemy.orm import Session
from database import get_db
from models import Question, Tag

qa_filename = "./q.md"

def read_questions():
    with io.open(qa_filename, "r", encoding="utf-8") as file:
        full_text = file.read()
        categories = []
        pattern = r"# ([a-zA-Z–∞-—è–ê-–Ø -]+) \d+"  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        categories = re.findall(pattern, full_text)
    return full_text, categories

def get_questions(cat_text):
    pattern = r"\d+ u?f"
    questions = re.findall(pattern, cat_text)
    return questions

def fill_cat(categories_names, cat_name, cat_text, full_question_list):
    questions = get_questions(cat_text)
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_name}': –Ω–∞–π–¥–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    for idx, q in enumerate(questions):
        q_text = cat_text[cat_text.find(q)+len(q):]
        q_text = q_text.split("\n\n")[0].strip()
        question = q_text[:q_text.find("\n")]
        i = 0
        if len(full_question_list) > 0:
            i = full_question_list[-1]["index"] + 1

        full_question_list.append({
            "category": cat_name, 
            "number": q, 
            "question": question, 
            "answer": q_text[q_text.find("\n"):].strip(), 
            "index": i
        })
        if cat_name not in categories_names:
            categories_names.append(cat_name)

def fill_dct(cats, categories_names, full_text, full_question_list):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_pattern = r"# [a-zA-Z–∞-—è–ê-–Ø -]+ \d+"
    header_matches = list(re.finditer(header_pattern, full_text))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(header_matches)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    
    for i, match in enumerate(header_matches):
        header_text = match.group()
        if "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in header_text:
            continue
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        pattern = r"[a-zA-Z–∞-—è–ê-–Ø -]+"
        name = re.findall(pattern, header_text)
        cat_name = name[0].strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–∞
        start_pos = match.end()  # –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if i + 1 < len(header_matches):
            end_pos = header_matches[i + 1].start()  # –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        else:
            end_pos = len(full_text)  # –î–æ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞
        
        cat_text = full_text[start_pos:end_pos].strip()
        
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º '{cat_name}': –ø–æ–∑–∏—Ü–∏–∏ {start_pos}-{end_pos}")
        fill_cat(categories_names, cat_name, cat_text, full_question_list)

def import_questions_to_db():
    """–ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–≥–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    full_text, categories = read_questions()
    full_question_list = []
    categories_names = []
    fill_dct(categories, categories_names, full_text, full_question_list)
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(full_question_list)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for cat_name in categories_names:
        count = len([q for q in full_question_list if q['category'] == cat_name])
        print(f"  {cat_name}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    db = next(get_db())
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ–≥–∞–º
        tag_mapping = {}
        for cat_name in categories_names:
            tag = db.query(Tag).filter(Tag.slug == cat_name).first()
            tag_mapping[cat_name] = tag

        imported_count = 0
        for q_data in full_question_list:
            tag = tag_mapping.get(q_data['category'])
            if not tag:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{q_data['category']}' - —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
                
            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            question = Question(
                q=q_data['question'],
                a=q_data['answer']
            )
            db.add(question)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ç–µ–≥–æ–º
            question.tags.append(tag)
            imported_count += 1
        
        db.commit()
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–≥–∞–º
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:")
        for cat_name, tag in tag_mapping.items():
            questions_count = len([q for q in full_question_list if q['category'] == cat_name])
            print(f"  {tag.title}: {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    import_questions_to_db()